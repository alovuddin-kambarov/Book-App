package uz.coder.mvpexample.adaptersimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.view.animation.AnimationUtilsimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.ListAdapterimport androidx.recyclerview.widget.RecyclerViewimport com.squareup.picasso.Callbackimport com.squareup.picasso.Picassoimport uz.coder.mvpexample.Rimport uz.coder.mvpexample.databinding.BookItem2Bindingimport uz.coder.mvpexample.models.books.books.BookXclass SavedAdapter(var onClick: OnItemMenuClick) :    ListAdapter<BookX, SavedAdapter.viewH>(MyDiffUtill()) {    inner class viewH(var binding: BookItem2Binding) :        RecyclerView.ViewHolder(binding.root) {        fun onBind(myClass: BookX) {            itemView.animation = AnimationUtils.loadAnimation(binding.root.context, R.anim.recy_anim2)            Picasso.get().load(myClass.book_image).resize(200,200).into(binding.booImage, object :Callback{                override fun onSuccess() {                    binding.shimmerView.visibility = View.GONE                }                override fun onError(e: Exception?) {                    binding.booImage.setImageResource(R.drawable.warning)                }            })            binding.bookName.text = myClass.author            binding.booImage.setOnClickListener { onClick.click(myClass) }        }    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): viewH {        return viewH(            BookItem2Binding.inflate(                LayoutInflater.from(parent.context),                parent,                false            )        )    }    override fun onBindViewHolder(holder: viewH, position: Int) {        holder.onBind(getItem(position))    }    class MyDiffUtill : DiffUtil.ItemCallback<BookX>() {        override fun areItemsTheSame(oldItem: BookX, newItem: BookX): Boolean {            return oldItem == newItem        }        override fun areContentsTheSame(oldItem: BookX, newItem: BookX): Boolean {            return oldItem.equals(newItem)        }    }     interface OnItemMenuClick {        fun click(bookX: BookX)    }}